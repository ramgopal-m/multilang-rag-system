import { Document, Packer, Paragraph, TextRun, HeadingLevel } from 'docx'
import puppeteer from 'puppeteer'

// DOCX Generation
export async function generateDocx(content: string, metadata: any): Promise<Buffer> {
  const { originalDocument, targetLanguage, languageName, originalLanguage } = metadata
  
  const doc = new Document({
    sections: [{
      properties: {},
      children: [
        // Title
        new Paragraph({
          text: `Translated Document: ${originalDocument}`,
          heading: HeadingLevel.TITLE,
        }),
        
        // Metadata section
        new Paragraph({
          text: "Translation Details",
          heading: HeadingLevel.HEADING_1,
        }),
        
        new Paragraph({
          children: [
            new TextRun({
              text: "Original Language: ",
              bold: true,
            }),
            new TextRun(`${originalLanguage.toUpperCase()}`),
          ],
        }),
        
        new Paragraph({
          children: [
            new TextRun({
              text: "Target Language: ",
              bold: true,
            }),
            new TextRun(`${languageName} (${targetLanguage})`),
          ],
        }),
        
        new Paragraph({
          children: [
            new TextRun({
              text: "Translated At: ",
              bold: true,
            }),
            new TextRun(new Date().toLocaleString()),
          ],
        }),
        
        // Separator
        new Paragraph({
          text: "",
        }),
        
        // Content header
        new Paragraph({
          text: "Translated Content",
          heading: HeadingLevel.HEADING_1,
        }),
        
        // Content paragraphs
        ...content.split('\n\n').filter(para => para.trim()).map(paragraph => 
          new Paragraph({
            children: [
              new TextRun({
                text: paragraph.trim(),
              }),
            ],
            spacing: {
              after: 200,
            },
          })
        ),
        
        // Footer
        new Paragraph({
          text: "",
        }),
        
        new Paragraph({
          children: [
            new TextRun({
              text: "Generated by Multilingual RAG System",
              italics: true,
              size: 20,
            }),
          ],
        }),
      ],
    }],
  })

  return await Packer.toBuffer(doc)
}

// PDF Generation using Puppeteer
export async function generatePdf(content: string, metadata: any): Promise<Buffer> {
  const { originalDocument, targetLanguage, languageName, originalLanguage } = metadata
  
  // Create HTML content for PDF
  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>Translated Document: ${originalDocument}</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                line-height: 1.6;
                max-width: 800px;
                margin: 0 auto;
                padding: 40px 20px;
                color: #333;
            }
            
            .header {
                text-align: center;
                border-bottom: 3px solid #667eea;
                padding-bottom: 20px;
                margin-bottom: 30px;
            }
            
            .header h1 {
                color: #667eea;
                margin: 0;
                font-size: 2.2rem;
            }
            
            .metadata {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 8px;
                margin-bottom: 30px;
                border-left: 5px solid #667eea;
            }
            
            .metadata h2 {
                margin-top: 0;
                color: #495057;
                font-size: 1.3rem;
            }
            
            .metadata-item {
                margin: 10px 0;
                display: flex;
                align-items: center;
            }
            
            .metadata-label {
                font-weight: 600;
                min-width: 140px;
                color: #495057;
            }
            
            .metadata-value {
                color: #333;
            }
            
            .content {
                margin-top: 30px;
            }
            
            .content h2 {
                color: #495057;
                border-bottom: 2px solid #e9ecef;
                padding-bottom: 10px;
            }
            
            .content p {
                margin: 15px 0;
                text-align: justify;
            }
            
            .footer {
                margin-top: 50px;
                text-align: center;
                font-style: italic;
                color: #6c757d;
                border-top: 1px solid #e9ecef;
                padding-top: 20px;
            }
            
            .language-badge {
                background: #667eea;
                color: white;
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 0.9rem;
            }
            
            @media print {
                body {
                    margin: 0;
                    padding: 20px;
                }
            }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üìÑ Translated Document</h1>
            <p style="margin: 10px 0; color: #6c757d; font-size: 1.1rem;">${originalDocument}</p>
        </div>
        
        <div class="metadata">
            <h2>üìã Translation Details</h2>
            
            <div class="metadata-item">
                <span class="metadata-label">Original Language:</span>
                <span class="metadata-value">
                    <span class="language-badge">${originalLanguage.toUpperCase()}</span>
                </span>
            </div>
            
            <div class="metadata-item">
                <span class="metadata-label">Target Language:</span>
                <span class="metadata-value">
                    <span class="language-badge">${targetLanguage.toUpperCase()}</span>
                    ${languageName}
                </span>
            </div>
            
            <div class="metadata-item">
                <span class="metadata-label">Translated At:</span>
                <span class="metadata-value">${new Date().toLocaleString()}</span>
            </div>
            
            <div class="metadata-item">
                <span class="metadata-label">Generated By:</span>
                <span class="metadata-value">Multilingual RAG System</span>
            </div>
        </div>
        
        <div class="content">
            <h2>üìñ Translated Content</h2>
            ${content.split('\n\n').filter(para => para.trim()).map(paragraph => 
              `<p>${paragraph.trim().replace(/\n/g, '<br>')}</p>`
            ).join('')}
        </div>
        
        <div class="footer">
            <p>Generated by Multilingual RAG System on ${new Date().toLocaleDateString()}</p>
            <p>üåê Supporting global communication through intelligent translation</p>
        </div>
    </body>
    </html>
  `

  let browser
  try {
    // Fast browser launch with minimal options
    browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox', 
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ]
    })
    
    const page = await browser.newPage()
    
    // Fast content loading
    await page.setContent(htmlContent, { 
      waitUntil: 'domcontentloaded' // Faster than networkidle0
    })
    
    // Quick PDF generation
    const pdf = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '15mm',
        right: '15mm',
        bottom: '15mm',
        left: '15mm'
      }
    })
    
    return Buffer.from(pdf)
  } finally {
    if (browser) {
      await browser.close()
    }
  }
}

// Helper function to get content type based on format
export function getContentType(format: string): string {
  switch (format.toLowerCase()) {
    case 'docx':
      return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    case 'pdf':
      return 'application/pdf'
    case 'json':
      return 'application/json'
    case 'md':
      return 'text/markdown'
    case 'txt':
    default:
      return 'text/plain'
  }
}

// Helper function to get file extension
export function getFileExtension(format: string): string {
  switch (format.toLowerCase()) {
    case 'docx':
      return 'docx'
    case 'pdf':
      return 'pdf'
    case 'json':
      return 'json'
    case 'md':
    case 'markdown':
      return 'md'
    case 'txt':
    case 'text':
    default:
      return 'txt'
  }
}
